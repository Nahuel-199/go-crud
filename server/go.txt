	// Establece la conexión a la base de datos
	clientOptions := options.Client().ApplyURI("mongodb+srv://nahuel:44850508@cluster0.mwvpsto.mongodb.net/goback?retryWrites=true&w=majority")
	client, err := mongo.Connect(context.Background(), clientOptions)
	if err != nil {
		log.Fatal(err)
	}

	db := client.Database("goback")
	collection := db.Collection("products")
    	
    
    // Ruta para crear un nuevo producto
	app.Post("/products", func(ctx *fiber.Ctx) error {
		// Crea un nuevo producto utilizando los datos de la solicitud HTTP
		product := new(models.Product)
		if err := ctx.BodyParser(product); err != nil {
			return err
		}

		// Inserta el nuevo producto en la base de datos
		result, err := collection.InsertOne(context.Background(), product)
		if err != nil {
			return err
		}

		// Devuelve una respuesta con el ID del nuevo producto insertado
		return ctx.JSON(fiber.Map{
			"message": "Producto creado",
			"id":      result.InsertedID,
		})
	})

	// Ruta para traer todos los productos
	app.Get("/products", func(c *fiber.Ctx) error {
		//Establecemos la conexion con la base de datos
		cursor, err := collection.Find(context.Background(), bson.M{})
		if err != nil {
			log.Fatal(err)
		}

		defer cursor.Close(context.Background())

		//Creamos un slice para almacenar los resultados de la consulta
		var products []models.Product

		//Iteramos sobre los resultados y los almacenamos en el slice
		for cursor.Next(context.Background()) {
			var product models.Product
			err := cursor.Decode(&product)
			if err != nil {
				log.Fatal(err)
			}
			products = append(products, product)
		}

		//Devolvemos los productos en formato JSON
		return c.JSON(products)
	})

	app.Get("/products/:id", func(c *fiber.Ctx) error {
		// Obtener el ID del producto de la URL
		id := c.Params("id")

		// Convertir el ID en un ObjectID de MongoDB
		objID, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "ID inválido",
			})
		}

		// Obtener el producto de la base de datos
		product := &models.Product{}
		err = collection.FindOne(context.Background(), bson.M{"_id": objID}).Decode(product)
		if err != nil {
			return c.Status(fiber.StatusNotFound).JSON(fiber.Map{
				"error": "Producto no encontrado",
			})
		}

		// Devolver el producto como respuesta
		return c.JSON(product)
	})

	app.Put("/products/:id", func(c *fiber.Ctx) error {
		// Obtenemos el id del producto a actualizar de los parámetros de la ruta
		id := c.Params("id")

		// Convertir el ID en un ObjectID de MongoDB
		objID, err := primitive.ObjectIDFromHex(id)

		//Si esta hay un error o si es igual a null
		if err != nil {
			return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{
				"error": "ID inválido",
			})
		}
		// Creamos un objeto de tipo Product y lo enlazamos con los datos enviados en el cuerpo de la solicitud (JSON)
		var product models.Product

		if err := c.BodyParser(&product); err != nil {
			return err
		}

		//Apuntamos a la collection donde vamos a actualizar
		collection := db.Collection("products")

		filter := bson.M{"_id": objID}

		// Creamos un objeto de tipo bson.M con los nuevos valores para actualizar el producto
		update := bson.M{
			"$set": bson.M{
				"title":       product.Title,
				"description": product.Description,
				"price":       product.Price,
				"img":         product.Img,
				"inStock":     product.InStock,
			},
		}

		// Actualizamos el producto en la base de datos
		if _, err := collection.UpdateOne(context.Background(), filter, update); err != nil {
			return err
		}

		// Devolvemos una respuesta con estado 200 (OK) y un mensaje de éxito
		return c.SendString("Product updated successfully!")
	})

	app.Delete("/products/:id", func(c *fiber.Ctx) error {
		// Obtenemos el id del producto a eliminar de los parámetros de la ruta
		id := c.Params("id")

		objID, err := primitive.ObjectIDFromHex(id)
		if err != nil {
			return err
		}

		collection := db.Collection("products")

		filter := bson.M{"_id": objID}

		// Eliminamos el producto de la base de datos
		if _, err := collection.DeleteOne(context.Background(), filter); err != nil {
			return err
		}

		// Devolvemos una respuesta con estado 200 (OK) y un mensaje de éxito
		return c.SendString("Product deleted successfully!")
	})